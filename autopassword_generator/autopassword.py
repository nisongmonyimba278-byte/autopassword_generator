#!/usr/bin/env python3
"""
autopassword.py - Secure password generator with CLI and simple Tkinter GUI.

Features:
- Cryptographically secure random generation (secrets module).
- Options for length, count, include symbols, digits, upper/lower, avoid ambiguous chars.
- Pronounceable password option (syllable-based) for easier memorability.
- Copies generated password(s) to clipboard if pyperclip is installed.
- Run with --gui to launch a small Tkinter interface.

Usage (CLI):
    python autopassword.py --length 16 --count 5 --no-symbols

Usage (GUI):
    python autopassword.py --gui

Author: Generated by ChatGPT (example project)
"""

import argparse
import secrets
import string
import sys

# Try to import clipboard support
try:
    import pyperclip
    CLIP_AVAILABLE = True
except Exception:
    CLIP_AVAILABLE = False

# Try to import tkinter if available (for GUI)
try:
    import tkinter as tk
    from tkinter import ttk, messagebox
    TK_AVAILABLE = True
except Exception:
    TK_AVAILABLE = False

AMBIGUOUS = {'l', '1', 'I', '0', 'O', 'o'}

def get_char_pools(avoid_ambiguous=False, symbols=True, digits=True, uppers=True, lowers=True):
    pools = []
    if lowers:
        pool = string.ascii_lowercase
        if avoid_ambiguous:
            pool = ''.join(ch for ch in pool if ch not in AMBIGUOUS)
        pools.append(pool)
    if uppers:
        pool = string.ascii_uppercase
        if avoid_ambiguous:
            pool = ''.join(ch for ch in pool if ch not in AMBIGUOUS)
        pools.append(pool)
    if digits:
        pool = string.digits
        if avoid_ambiguous:
            pool = ''.join(ch for ch in pool if ch not in AMBIGUOUS)
        pools.append(pool)
    if symbols:
        # A conservative symbol set that is commonly accepted by systems
        pool = "!@#$%&*?-_=+"
        pools.append(pool)
    return pools

def secure_password(length=16, avoid_ambiguous=False, symbols=True, digits=True, uppers=True, lowers=True):
    pools = get_char_pools(avoid_ambiguous, symbols, digits, uppers, lowers)
    if not pools:
        raise ValueError("No character classes enabled.")
    # Ensure at least one char from each enabled class for strength
    password_chars = []
    for pool in pools:
        password_chars.append(secrets.choice(pool))
    # Fill the rest
    all_chars = ''.join(pools)
    while len(password_chars) < length:
        password_chars.append(secrets.choice(all_chars))
    # Shuffle securely
    secrets.SystemRandom().shuffle(password_chars)
    return ''.join(password_chars[:length])

def pronounceable_password(syllables=4):
    # Simple syllable-based generator: consonant + vowel (+ optional consonant)
    consonants = "bcdfghjklmnpqrstvwxyz"
    vowels = "aeiou"
    caps = "BCDFGHJKLMNPQRSTVWXYZ"
    pw = []
    for i in range(syllables):
        c = secrets.choice(consonants)
        v = secrets.choice(vowels)
        # Occasionally add a trailing consonant
        if secrets.randbelow(3) == 0:
            c2 = secrets.choice(consonants)
            chunk = c + v + c2
        else:
            chunk = c + v
        # Randomly capitalize some chunks
        if secrets.randbelow(2) == 0:
            chunk = chunk.capitalize()
        pw.append(chunk)
    return ''.join(pw)

def generate_batch(count=1, length=16, pronounceable=False, **kwargs):
    results = []
    for _ in range(count):
        if pronounceable:
            # approximate target length by number of syllables
            # each syllable ~2-3 chars; choose syllables so final length close to requested
            syllables = max(2, int(round(length / 2.5)))
            results.append(pronounceable_password(syllables))
        else:
            results.append(secure_password(length=length, **kwargs))
    return results

def cli():
    parser = argparse.ArgumentParser(description="AutoPassword - secure password generator (CLI + optional GUI)")
    parser.add_argument("--length", "-l", type=int, default=16, help="Length of each password (default: 16)")
    parser.add_argument("--count", "-c", type=int, default=1, help="How many passwords to generate (default: 1)")
    parser.add_argument("--no-symbols", action="store_true", help="Disable symbols")
    parser.add_argument("--no-digits", action="store_true", help="Disable digits")
    parser.add_argument("--no-uppers", action="store_true", help="Disable uppercase letters")
    parser.add_argument("--no-lowers", action="store_true", help="Disable lowercase letters")
    parser.add_argument("--avoid-ambiguous", action="store_true", help="Avoid ambiguous characters like l/1/I/0/O")
    parser.add_argument("--pronounceable", action="store_true", help="Generate pronounceable (memorable) passwords")
    parser.add_argument("--gui", action="store_true", help="Open the Tkinter GUI")
    args = parser.parse_args()

    if args.gui:
        if not TK_AVAILABLE:
            print("Tkinter GUI is not available in this Python environment.")
            sys.exit(1)
        launch_gui()
        return

    symbols = not args.no_symbols
    digits = not args.no_digits
    uppers = not args.no_uppers
    lowers = not args.no_lowers

    passwords = generate_batch(count=args.count, length=args.length, pronounceable=args.pronounceable,
                               avoid_ambiguous=args.avoid_ambiguous, symbols=symbols, digits=digits,
                               uppers=uppers, lowers=lowers)
    out = '\\n'.join(passwords)
    print(out)
    # Try copying the first password to clipboard
    if CLIP_AVAILABLE and passwords:
        try:
            pyperclip.copy(passwords[0])
            print("\\n[+] First password copied to clipboard.")
        except Exception:
            pass

def launch_gui():
    # Basic Tkinter GUI to generate passwords
    root = tk.Tk()
    root.title("AutoPassword Generator")
    frm = ttk.Frame(root, padding=12)
    frm.grid()

    # Length
    ttk.Label(frm, text="Length:").grid(column=0, row=0, sticky="w")
    length_var = tk.IntVar(value=16)
    length_spin = ttk.Spinbox(frm, from_=4, to=128, textvariable=length_var, width=6)
    length_spin.grid(column=1, row=0, sticky="w")

    # Count
    ttk.Label(frm, text="Count:").grid(column=0, row=1, sticky="w")
    count_var = tk.IntVar(value=1)
    count_spin = ttk.Spinbox(frm, from_=1, to=50, textvariable=count_var, width=6)
    count_spin.grid(column=1, row=1, sticky="w")

    pronounce_var = tk.BooleanVar(value=False)
    ttk.Checkbutton(frm, text="Pronounceable (memorable)", variable=pronounce_var).grid(column=0, row=2, columnspan=2, sticky="w")

    avoid_var = tk.BooleanVar(value=False)
    ttk.Checkbutton(frm, text="Avoid ambiguous chars (e.g. l,1,O,0)", variable=avoid_var).grid(column=0, row=3, columnspan=2, sticky="w")

    symbols_var = tk.BooleanVar(value=True)
    ttk.Checkbutton(frm, text="Include symbols", variable=symbols_var).grid(column=0, row=4, columnspan=2, sticky="w")

    digits_var = tk.BooleanVar(value=True)
    ttk.Checkbutton(frm, text="Include digits", variable=digits_var).grid(column=0, row=5, columnspan=2, sticky="w")

    uppers_var = tk.BooleanVar(value=True)
    ttk.Checkbutton(frm, text="Include uppercase", variable=uppers_var).grid(column=0, row=6, columnspan=2, sticky="w")

    lowers_var = tk.BooleanVar(value=True)
    ttk.Checkbutton(frm, text="Include lowercase", variable=lowers_var).grid(column=0, row=7, columnspan=2, sticky="w")

    output = tk.Text(frm, width=48, height=8, wrap="none")
    output.grid(column=0, row=9, columnspan=2, pady=(8,0))

    def do_generate():
        length = int(length_var.get())
        count = int(count_var.get())
        pronounce = pronounce_var.get()
        passwords = generate_batch(count=count, length=length, pronounceable=pronounce,
                                   avoid_ambiguous=avoid_var.get(), symbols=symbols_var.get(),
                                   digits=digits_var.get(), uppers=uppers_var.get(), lowers=lowers_var.get())
        output.delete("1.0", tk.END)
        output.insert(tk.END, "\\n".join(passwords))
        # copy first to clipboard if possible
        if CLIP_AVAILABLE and passwords:
            try:
                pyperclip.copy(passwords[0])
                messagebox.showinfo("Copied", "First password copied to clipboard.")
            except Exception:
                pass

    gen_btn = ttk.Button(frm, text="Generate", command=do_generate)
    gen_btn.grid(column=0, row=8, sticky="w", pady=(6,0))
    copy_btn = ttk.Button(frm, text="Copy All", command=lambda: pyperclip.copy(output.get("1.0", tk.END)) if CLIP_AVAILABLE else messagebox.showinfo("Clipboard", "pyperclip not available. Install with: pip install pyperclip"))
    copy_btn.grid(column=1, row=8, sticky="e", pady=(6,0))

    root.mainloop()

if __name__ == "__main__":
    cli()
